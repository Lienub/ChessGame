@startuml
/'=================================
  ===          MODEL            ===
  ================================='/
package model #8df2a8{
    abstract class Piece {
        - Integer color
        # Position position
        # Boolean isCapturable
        # List<Position> possibleMoves

        + Piece(color : Integer, position : Position)

        + getColor() : Integer
        + getPosition() : Position
        + getIsCaptured() : Boolean
        + getPossibleMoves() : List<Position>

        + move(coord : Position) : Boolean

        + setMove(plateau : Piece[][]) : void
        + setColor(color : Integer) : void
        + setPosition(position : Position) : void
        + setIsCaptured(isCaptured : Boolean) : void

    }

    class Position{
        - xPos : int
        - yPos : int

        + Position(x : int, y : int)
        + setPos(x : int, y : int) : void
        + equals(p : Position) : Boolean
        + getX() : Integer
        + getY() : Integer
    }

    class Queen{
        + Queen(color : Integer, position : Position)

        + setMove(plateau : Piece[][], coord : Position) : void
    }

    class Rook{
        + Rook(color : Integer, position : Position)

        + setMove(plateau : Piece[][], coord : Position) : void
    }

    class Pawn{
        - Boolean isPromoted
        - Boolean isPromotable
        - Boolean firstMove

        + Pawn(color : Integer, position : Position)

        + getIsPromoted() : Boolean
        + getIsPromotable() : Boolean

        + setMove(plateau : Piece[][], coord : Position) : void
        + setIsPromoted(isPromoted : Boolean) : void
        + setIsPromotable( isPromotable : Boolean) : void
    }

    class King{
        - Boolean isUndefendable

        + King(color : Integer, position : Position)

        + setMove(plateau : Piece[][], coord : Position) : void

        + getIsUndefendable() : Boolean
        + setIsUndefendable(isUndefendable : Boolean) : void
    }

    class Bishop{
        + Bishop(color : Integer, position : Position)

        + setMove(plateau : Piece[][]) : void
        + addMove(plateau : Piece[][], j : Integer, i : Integer) : Boolean
    }

    class Knight{
        + Knight(color : Integer, position : Position)

        + setMove(plateau : Piece[][], coord : Position) : void
    }
}
/'=================================
  ===        CONTROLLER         ===
  ================================='/
package controller #f28d97{
    class MainGame{
    }
}
/'=================================
  ===           VIEW            ===
  ================================='/
package view #f2d48d{
    class Player {
        - playerName : String
        - playerColor : Integer
        - listPiece : List<Piece>
        - deadPiece : List<Piece>

        + Joueur(playerName : String, playerColor : Integer)

        + getName() : String
        + getColor() : Integer
        + getAllPiece() : List<Piece>
        + getDeadPiece() : List<Piece>

        + initPiece() : void
        + removePiece(coord : Position)
    }

    class GameViewer {
        - instance : GameViewer

        + GameViewer() : GameViewer
    }
}
/'=================================
  ===          LINKS            ===
  ================================='/
Position - Piece : use <

Knight --* Piece
Piece *-- Pawn
Piece *-- Bishop
Piece *-- Rook
King --* Piece
Piece *-u- Queen


GameViewer -l- Player : use >
@enduml