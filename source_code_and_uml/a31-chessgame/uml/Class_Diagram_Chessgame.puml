@startuml
/'=================================
  ===          MODEL            ===
  ================================='/
package model #8df2a8{

    abstract class Piece {
        # Observers : ArrayList<PieceObserver>
        - color : Integer
        # position : Boolean
        # isCapturable : Boolean
        # possibleMoves : List<Position>
        # possibleCaptures : List<Position>
        /' Mettre sur fl√®che : # List<Position> possibleMoves'/

        + Piece(color : Integer, position : Position)

        + addObserver(observer : PieceObserver) : void
        + removeObserver(observer : PieceObserver) : void
        + notifyObservers() : void

        + getColor() : Integer
        + getPosition() : Position
        + getIsCaptured() : Boolean
        + getPossibleMoves() : List<Position>
        + getPossibleCaptures() : List<Position>

        + move(coord : Position) : Boolean

        + setColor(color : Integer) : void
        + setPosition(position : Position) : void
        + setIsCaptured(isCaptured : Boolean) : void
        + setMove(plateau : Piece[][]) : void
        + setCapture(plateau : Piece[][]) : void
    }

     class Player {
        - playerName : String
        - playerColor : Integer
        - listPiece : List<Piece>
        - deadPiece : List<Piece>

        + Joueur(playerName : String, playerColor : Integer)

        + getName() : String
        + getColor() : Integer
        + getAllPiece() : List<Piece>
        + getDeadPiece() : List<Piece>

        + initPiece() : void
        + removePiece(coord : Position)
     }

    class Position{
        - xPos : int
        - yPos : int

        + Position(x : int, y : int)

        + equals(p : Position) : Boolean

        + getX() : Integer
        + getY() : Integer
    }

    class Queen{
        + Queen(color : Integer, position : Position)

        + setMove(plateau : Piece[][], coord : Position) : void

        - addMove(plateau : Piece[][], j : int, i : int) : Boolean
    }

    class Rook{
        + Rook(color : Integer, position : Position)

        + setMove(plateau : Piece[][]) : void

        - addMove(plateau : Piece[][], j : int, i : int) : Boolean
    }

    class Pawn{
        - isPromotable : Boolean
        - firstMove : Boolean

        + Pawn(color : Integer, position : Position)

        + move()(plateau : Piece[][], coord Position) : Boolean

        + getIsPromotable() : Boolean

        + setIsPromotable( isPromotable : Boolean) : void
        + setMove(plateau : Piece[][]) : void
    }

    class King{
        - state : String

        + King(color : Integer, position : Position)

        + getState() : String

        + setState(captures : List<Position>) : void
        + setMove(plateau : Piece[][]) : void
    }

    class Bishop{
        + Bishop(color : Integer, position : Position)

        + setMove(plateau : Piece[][]) : void

        + addMove(plateau : Piece[][], j : int, i : int) : Boolean
    }

    class Knight{
        + Knight(color : Integer, position : Position)

        + setMove(plateau : Piece[][]) : void
    }

    interface PieceObserver{
        reactTo(p : Piece) : void
    }

    interface ChessBoardObserver{
        reactTo(plateau : Piece[][]) : void
    }
}
/'=================================
  ===        CONTROLLER         ===
  ================================='/
package controller #f28d97{
    class MainGame{
        + {static} plateau : Piece[][]
        + {static} boardObserver : ArrayList<ChessBoardObserver>
        - {static} currentMoves : List<Position>
        - {static} currentCaptures : List<Position>
        - {static} currentPos : Position

        - {static} currentPlayer : Player
        + {static} player1 : Player
        + {static} player2 : Player

        + {static} board_view : GameViewer
        + {static} menu_view : MenuViewer
        + {static} score_view : ScoreViewer

        + {static} main(String args[]) : void

        + {static} addPiece(pieces : List<Piece>) : void
        + {static} movePiece(p : Piece, pos : Position) : void

        + {static} getPlateau() : Piece[][]
        + {static} getCurrentMoves() : List<Position>

        + {static} setCurrentMoves(moves : List<Position>) : void
        + {static} setCurrentPos(pos : Position) : void

    }

    class GameplayObserver{
        - {static} plateau : Piece[][]
        - {static} color : int

        + reactTo(p : Piece[][], c : int) : void
        - listCaptures() : List<Position>
    }

    class GraphicalObserver{
        + reactTo(p : Piece) : void
    }

    class PromoteObserver{
        + reactTo(p : Piece) : void
    }
}
/'=================================
  ===           VIEW            ===
  ================================='/
package view #f2d48d{


    class GameViewer {
        - squares : JButton[][]
        - displayMoves : JLabel[][]
        - displayCaptures : JLabel[][]
        - turn : JLabel
        + J1Capture : JLabel
        + J1CaptureCount : int
        + J2Capture : JLabel
        + J2CaptureCount : int

        + miscInfos : JPanel
        + checkJ1 : JLabel
        + checkJ2 : JLabel
        - {static} COLS : String

        + GameViewer()

        + resetDisplayPiece(plateau : Piece[][]) : void
        + displayPieces(plateau : Piece[][]) : void
        + resetDisplayMoves( displayMoves : JLabel[][]) : void

        + update() : void
        + addCapture(p : Piece) : void
        + changeCapture(p : Piece, index : int) : void
        + setActions() : void
        + displayCheck(player : Player, state : String) : void
        + resetCheck(player : Player) : void

    }

    class GameMenu {
        - player1Name : String
        - player2Name : String

        + GameMenu()

        + getNameP1() : String
        + getNameP2() : String
    }

    class GameScore {
        + GameScore()
    }

    class GamePromote {
        - p : Piece
        - deadPieces : List<Piece>

        + GamePromote(piece : Piece)
        + initButtons() : void
        - operateChanges(name : String) : void
    }
}


/'=================================
  ===          LINKS            ===
  ================================='/


Position -d- Piece : use "# position : Position" <
Position -u-  MainGame : use "- currentPos : Position" <
Piece --u- MainGame : use "- plateau : Piece[][]" <
Position -  Piece : use "# position : Position" <
Position -  MainGame : use "- currentPos : Position" <
Piece - MainGame : use "- plateau : Piece[][]" <

MainGame o-d- Player : use >
controller - Piece : manipulate >
GameViewer -- Piece : check >
GameViewer - MainGame : transmit data  >

Piece <|-- Knight
Piece <|-- Bishop
Piece <|-- Rook
Piece <|-u- Pawn
Piece <|-u- King
Piece <|-u- Queen

PieceObserver <|-u- PromoteObserver
PromoteObserver o-- GamePromote
PieceObserver <|-u- GraphicalObserver
GraphicalObserver --o MainGame

MainGame o-- GameViewer
MainGame o-- GameMenu
MainGame o-- GameScore

GameScore o-- GameMenu
GameplayObserver --o MainGame

@enduml